AWSTemplateFormatVersion: '2010-09-09'
Description: 'Infrastructure for Knowledge Graph Uploader - S3 Static Website with CloudFront and GitHub Actions CI/CD'

Parameters:
  ProjectName:
    Type: String
    Default: 'file-to-knowledge-graph'
    Description: 'Name of the project (used for resource naming)'
  
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Environment name'
  
  DomainName:
    Type: String
    Default: ''
    Description: 'Optional: Custom domain name (e.g., myapp.example.com)'
  
  CertificateArn:
    Type: String
    Default: ''
    Description: 'Optional: ACM certificate ARN for custom domain (must be in us-east-1)'

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, '']]
  HasCertificate: !Not [!Equals [!Ref CertificateArn, '']]

Resources:
  # S3 Bucket for Website Hosting
  WebsiteBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-website'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'index.html'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: ['GET', 'HEAD']
            AllowedOrigins: ['*']
            MaxAge: 3600
      NotificationConfiguration: {}
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment
        - Key: 'Purpose'
          Value: 'Static Website Hosting'

  # S3 Bucket Policy for Public Access
  WebsiteBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: 'PublicReadGetObject'
            Effect: 'Allow'
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${WebsiteBucket}/*'

  # CloudFront Origin Access Control
  OriginAccessControl:
    Type: 'AWS::CloudFront::OriginAccessControl'
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${ProjectName}-${Environment}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases: !If
          - HasCustomDomain
          - [!Ref DomainName]
          - !Ref 'AWS::NoValue'
        DefaultCacheBehavior:
          TargetOriginId: !Sub '${ProjectName}-s3-origin'
          ViewerProtocolPolicy: 'redirect-to-https'
          CachePolicyId: '658327ea-f89d-4fab-a63d-7e88639e58f6' # Managed-CachingOptimized
          OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf' # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: '5cc3b908-e619-4b99-88e5-2cf7f45965bd' # Managed-SecurityHeadersPolicy
        DefaultRootObject: 'index.html'
        Enabled: true
        HttpVersion: 'http2'
        IPV6Enabled: true
        PriceClass: 'PriceClass_100'
        Origins:
          - Id: !Sub '${ProjectName}-s3-origin'
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: '/index.html'
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: '/index.html'
            ErrorCachingMinTTL: 300
        ViewerCertificate: !If
          - HasCertificate
          - AcmCertificateArn: !Ref CertificateArn
            SslSupportMethod: 'sni-only'
            MinimumProtocolVersion: 'TLSv1.2_2021'
          - CloudFrontDefaultCertificate: true
        Comment: !Sub 'CloudFront distribution for ${ProjectName} ${Environment}'
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

  # IAM Role for GitHub Actions
  GitHubActionsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-github-actions-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/token.actions.githubusercontent.com'
            Action: 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'token.actions.githubusercontent.com:aud': 'sts.amazonaws.com'
              StringLike:
                'token.actions.githubusercontent.com:sub': 'repo:jidehen/file-to-knowledge-graph:*'
      ManagedPolicyArns: []
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

  # IAM Policy for GitHub Actions
  GitHubActionsPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${ProjectName}-${Environment}-github-actions-policy'
      Roles:
        - !Ref GitHubActionsRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'S3BucketAccess'
            Effect: 'Allow'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt WebsiteBucket.Arn
              - !Sub '${WebsiteBucket}/*'
          - Sid: 'CloudFrontInvalidation'
            Effect: 'Allow'
            Action:
              - 'cloudfront:CreateInvalidation'
            Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Alternative: IAM User for GitHub Actions (if OIDC is not preferred)
  GitHubActionsUser:
    Type: 'AWS::IAM::User'
    Properties:
      UserName: !Sub '${ProjectName}-${Environment}-github-actions-user'
      Tags:
        - Key: 'Project'
          Value: !Ref ProjectName
        - Key: 'Environment'
          Value: !Ref Environment

  # IAM Policy for GitHub Actions User
  GitHubActionsUserPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: !Sub '${ProjectName}-${Environment}-github-actions-user-policy'
      Users:
        - !Ref GitHubActionsUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'S3BucketAccess'
            Effect: 'Allow'
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:PutObjectAcl'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource:
              - !GetAtt WebsiteBucket.Arn
              - !Sub '${WebsiteBucket}/*'
          - Sid: 'CloudFrontInvalidation'
            Effect: 'Allow'
            Action:
              - 'cloudfront:CreateInvalidation'
            Resource: !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

  # Access Keys for GitHub Actions User
  GitHubActionsAccessKey:
    Type: 'AWS::IAM::AccessKey'
    Properties:
      UserName: !Ref GitHubActionsUser

Outputs:
  WebsiteBucketName:
    Description: 'Name of the S3 bucket for website hosting'
    Value: !Ref WebsiteBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteBucketName'

  WebsiteURL:
    Description: 'S3 Website URL'
    Value: !GetAtt WebsiteBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteURL'

  CloudFrontDistributionId:
    Description: 'CloudFront Distribution ID'
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Description: 'CloudFront Distribution Domain Name'
    Value: !GetAtt CloudFrontDistribution.DomainName
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomainName'

  CloudFrontURL:
    Description: 'CloudFront Distribution URL'
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  GitHubActionsRoleArn:
    Description: 'ARN of the GitHub Actions IAM Role (for OIDC)'
    Value: !GetAtt GitHubActionsRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GitHubActionsRoleArn'

  GitHubActionsUserArn:
    Description: 'ARN of the GitHub Actions IAM User'
    Value: !GetAtt GitHubActionsUser.Arn
    Export:
      Name: !Sub '${AWS::StackName}-GitHubActionsUserArn'

  GitHubActionsAccessKeyId:
    Description: 'Access Key ID for GitHub Actions User'
    Value: !Ref GitHubActionsAccessKey
    Export:
      Name: !Sub '${AWS::StackName}-GitHubActionsAccessKeyId'

  GitHubActionsSecretAccessKey:
    Description: 'Secret Access Key for GitHub Actions User'
    Value: !GetAtt GitHubActionsAccessKey.SecretAccessKey
    Export:
      Name: !Sub '${AWS::StackName}-GitHubActionsSecretAccessKey'

  Region:
    Description: 'AWS Region'
    Value: !Ref 'AWS::Region'
    Export:
      Name: !Sub '${AWS::StackName}-Region'